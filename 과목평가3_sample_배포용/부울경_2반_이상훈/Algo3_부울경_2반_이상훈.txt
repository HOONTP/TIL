1.
스택은 선입선출의 구조를 가지는 방법이다.
탐색 과정에서 마지막에 탐색한 지점을 저장해놓고
다시 그 값을 이용하여 탐색을 이어가는 방법으로 사용할 수 있다.

2.
DFS(깊이우선탐색)은 특정 조건 하에 탐색 가능한 가장 깊은 지점까지 먼저 탐색하는 방법이다.
stack의 구조를 이용하며 조건에 맞는 가능한 가장 깊은 곳에서 더 이상 진행할 수 없는 경우
지나왔던 가장 마지막 지점에서 재 탐색하는 방법을 DFS라고 한다.
이 진행 과정 속에서 이미 탐색을 마친 지점은 다시 탐색하지 않음으로 탐색 가능한 모든 부분을
탐색할 수 있게 된다.

3.
우선 1번 정점부터 DFS를 하는 경우의 방문 순서가 1 2 4 6 5 7 3 인 것으로 보아서.
탐색 지점의 갈림길에서 더 작은 수를 우선 선택했다는 것을 알 수 있다.
그 조건을 이용하여 4번 정점에서 DFS를 시작한다면
dfs(4)의 경우 2와 6 중에서 더 작은 2의 경로를 택하게 된다. # [4, 2]
dfs(2)의 경우 1과 5 중에서 1의 경로를 택하게 된다. # [4, 2, 1]
dfs(1)의 경우 2와 3 중에서 2가 더 작지만 이미 탐색을 한 경로이기 때문에 3을 탐색하게 된다.
# [4, 2, 1, 3]
# [4, 2, 1, 3, 7]
# [4, 2, 1, 3, 7, 6]
dfs(6)에서도 마찬가지로 4는 이미 탐색한 지점이므로 5를 탐색하게 된다.
# [4, 2, 1, 3, 7, 6, 5] 이렇게 탐색 순서가 정해지고
5에서는 모든 방향이 탐색을 마친 방향이므로 DFS의 구조를 그대로 수행하게 된다면
stack에 저장되어 있는 [4, 2, 1, 3, 7, 6]의 마지막 지점으로 계속해서 뒷걸음질하며
탐색 가능한 지점이 있는지 확인하게 된다.